00 - Cloned github repository from https://github.com/firebase/friendlychat

01 - Created Firebase project and set up app
	* From firebase console (https://console.firebase.google.com/), clicked CREATE NEW PROJECT, naming it FriendlyChat
	* Initialized app by clicking Add Firebase to your web app button
	added to index.html at the end of the body, the code generated by Firebase console: 
		<script src="https://www.gstatic.com/firebasejs/3.4.1/firebase.js"></script>
		<script>
		  // Initialize Firebase
		  var config = {
		    apiKey: "SUPER-SECRET-API-KEY",
		    authDomain: "friendlychat-SOMENUMBER.firebaseapp.com",
		    databaseURL: "https://friendlychat-SOMENUMBER.firebaseio.com",
		    storageBucket: "friendlychat-SOMENUMBER.appspot.com",
		    messagingSenderId: "NOT-LEAKING-THE-SENDER-ID"
		  };
		  firebase.initializeApp(config);
		</script>
	* enabled Google Auth for user sign in
		clicked Auth
		clicked Set Up Sign-In Method
			options present to add client IDs and web client IDs to link to existing projects
02 - Installed the Firebase Command Line Interface
	* installed the CLI
		npm -g install firebase-tools
	* verified the CLI installed correctly
		firebase version
		=> 3.0.8
	* authorised the firebase CLI by running
		firebase login
		=> followed link provided by CLI
		=> logged in with 1.selva.oscura
	* from the root directory of the project, set up the Firebase CLI to use the Firebase Project
		firebase use --add
			=> --add allows selection of a Firebase project and giving it a named alias (alias definitions are written to .firebaserc in project directory) 
				-- list of currently defined alias for project directory found with
					firebase use
				-- switching between aliases done with
					firebase use <alias_or_project_id>
			all project-specific commands (e.g. firebase deploy or firebase data:get run against the currently used project)
				-- current alias can be cleared by 
					firebase use --clear
			!!! while teams sharing a firebase project should check .firebaserc project into source control, open source projects or starter templates should NOT be checked in
		added project 
			=> (name matches the config settings added during the intialization process's script from Firebase)
		set alias 
			=> default
03 - Run the starter app 
	* serve the app
		firebase serve
			=> Listening at http://localhost:5000
04 - User Sign-In
	* Initialise Firebase Auth -- scripts/main.js
		// Sets up shortcuts to Firebase features and initiate firebase auth.
		FriendlyChat.prototype.initFirebase = function() {
		  // Shortcuts to Firebase SDK features.
		  this.auth = firebase.auth();
		  this.database = firebase.database();
		  this.storage = firebase.storage();
		  // Initiates Firebase auth and listen to auth state changes.
		  this.auth.onAuthStateChanged(this.onAuthStateChanged.bind(this));
		};	
	* Authorise Firebase with Google
		documentation at
			https://firebase.google.com/docs/auth/web/google-signin
	  in scripts/main.js
	  sign-in
		// Signs-in Friendly Chat.
		FriendlyChat.prototype.signIn = function() {
		  // Sign in Firebase using popup auth and Google as the identity provider.
		  var provider = new firebase.auth.GoogleAuthProvider();
		  this.auth.signInWithPopup(provider);
		};
	  sign-out
		// Signs-out of Friendly Chat.
		FriendlyChat.prototype.signOut = function() {
		  // Sign out of Firebase.
		  this.auth.signOut();
		};
	  display user photo and name
		// Triggers when the auth state change for instance when the user signs-in or signs-out.
		FriendlyChat.prototype.onAuthStateChanged = function(user) {
		  if (user) { // User is signed in!
		    // Get profile pic and user's name from the Firebase user object.
		    var profilePicUrl = user.photoURL; 
		    var userName = user.displayName;   
		  ...
	  display error message if user tries to send messages when user is not signed-in
		// Returns true if user is signed-in. Otherwise false and displays a message.
		FriendlyChat.prototype.checkSignedInWithMessage = function() {
		  // Return true if the user is signed in Firebase
		  if (this.auth.currentUser) {
		    return true;
		  }	  
		  ...
05 - Read Messages
	* Import Messages
		From Firebase console, click Database section on left navigation bar (for this project, => https://console.firebase.google.com/project/friendlychat-SOME-NUMBER/database/data)
		In the ... menu (right side of the database panel), selected IMPORT JSON and imported initial_messages.json from the root directory of the original repo
	* Synchronise Messages
		add event listeners that trigger when changes are made to the data and which then create the UI elemen that shows the new messages
		in scripts/main.js
			// Loads chat messages history and listens for upcoming ones.
			FriendlyChat.prototype.loadMessages = function() {
			  // Reference to the /messages/ database path.
			  this.messagesRef = this.database.ref('messages');
			  // Make sure we remove all previous listeners.
			  this.messagesRef.off();

			  // Loads the last 12 messages and listen for new ones.
			  var setMessage = function(data) {
			    var val = data.val();
			    this.displayMessage(data.key, val.name, val.text, val.photoUrl, val.imageUrl);
			  }.bind(this);
			  this.messagesRef.limitToLast(12).on('child_added', setMessage);
			  this.messagesRef.limitToLast(12).on('child_changed', setMessage);
			};
06 - Database Security and Deployment to Firebase's Server
	* created in root   database-rules.json 
	  specify rules for reading and writing (in this case, only requiring authorized)
		{
		  "rules": {
		    ".read": "auth != null",
		    ".write": "auth != null"
		  }
		}
	* updated in root   firebase.json
	  firebase config file refers firebase to the database rules file
		{
		  "database": {
		  	"rules": "database-rules.json"
		  },
		  "hosting": {
		    "public": "./",
		    "ignore": [
		      "firebase.json",
		      "database-rules.json",
		      "storage.rules"
		    ]
		  }
		}
	* deploy online with the database security rules
		firebase deploy
		=> deployed to https://friendlychat-SOME-NUMBER.firebaseapp.com
07 - Send Messages
	* Implement Message Sending
		push to messagesRef the data from the message form (messageInput) and the currentUser's profile information tp save the message on the Firebase DB
		in scripts/main.js, update saveMessage
			FriendlyChat.prototype.saveMessage = function(e) {
			  e.preventDefault();
			  // Check that the user entered a message and is signed in.
			  if (this.messageInput.value && this.checkSignedInWithMessage()) {
			    var currentUser = this.auth.currentUser;
			    // Add a new message entry to the Firebase Database.
			    this.messagesRef.push({
			      name: currentUser.displayName,
			      text: this.messageInput.value,
			      photoUrl: currentUser.photoURL || '/images/profile_placeholder.png'
			    }).then(function() {
			      // Clear message text field and SEND button state.
			      FriendlyChat.resetMaterialTextfield(this.messageInput);
			      this.toggleButton();
			    }.bind(this)).catch(function(error) {
			      console.error('Error writing new message to Firebase Database', error);
			    });
			  }
			};
08 - Send Images
	* Save Images to Firebase Storage (the file/blob database service)
		saveImageMessage function triggers code that creates a 'placeholder' chat message with a temporary loading image into the chat feed
		upload the file to FirebaseStorage to the path: /<uid>/<timestamp>/<file_name>
		update the chat message with the newly uploaded file's Firebase Storage URI in lieu of the temporary loading image
			FriendlyChat.prototype.saveImageMessage = function(event) {
			  ...
			  // Check if the user is signed-in
			  if (this.checkSignedInWithMessage()) {

			    // We add a message with a loading icon that will get updated with the shared image.
			    var currentUser = this.auth.currentUser;
			    this.messagesRef.push({
			      name: currentUser.displayName,
			      imageUrl: FriendlyChat.LOADING_IMAGE_URL,
			      photoUrl: currentUser.photoURL || '/images/profile_placeholder.png'
			    }).then(function(data) {

			      // Upload the image to Firebase Storage.
			      this.storage.ref(currentUser.uid + '/' + Date.now() + '/' + file.name)
			          .put(file, {contentType: file.type})
			          .then(function(snapshot) {
			            // Get the file's Storage URI and update the chat message placeholder.
			            var filePath = snapshot.metadata.fullPath;
			            data.update({imageUrl: this.storage.ref(filePath).toString()});
			          }.bind(this)).catch(function(error) {
			        console.error('There was an error uploading a file to Firebase Storage:', error);
			      });
			    }.bind(this));
			  }
			};
	* Display images from Firebase Storage
		The chat message image references are saved in the format of 
			gs://<bucket>/<uid>/<timestamp>/<filename>
		To display the images, Firebase Storage is queried for the URL
			FriendlyChat.prototype.setImageUrl = function(imageUri, imgElement) {
			  // If the image is a Firebase Storage URI we fetch the URL.
			  if (imageUri.startsWith('gs://')) {
			    imgElement.src = FriendlyChat.LOADING_IMAGE_URL; // Display a loading image first.
			    this.storage.refFromURL(imageUri).getMetadata().then(function(metadata) {
			      imgElement.src = metadata.downloadURLs[0];
			    });
			  } else {
			    imgElement.src = imageUri;
			  }
			};
09 - Storage Security rules
	* Created storage.rules in root directory
	NOTE: different match route to tutorial (error noted in repo)
		service firebase.storage{
			match /b/friendlychat-833dd.appspot.com/o {
				match /{userId}/{timeStamp}/{fileName} {
					allow write: if request.auth.uid == userId;
					allow read;
				}
			}
		}
	* update firebase.json to include reference to "storage"
		{
		  // If you went through the "Realtime Database Security Rules" step.
		  "database": {
		    "rules": "database-rules.json"
		  },
		  "storage": {
		    "rules": "storage.rules"
		  },
		  "hosting": {
		    "public": "./",
		    "ignore": [
		      "firebase.json",
		      "database-rules.json",
		      "storage.rules"
		    ]
		  }
		}
	* deploy to server
		firebase deploy





REFERENCES
	Get Started with Firebase for Web Apps
		https://firebase.google.com/docs/web/setup
	Firebase Web SDK API reference
		https://firebase.google.com/docs/reference/js/index-all
	Firebase Web Samples
		https://firebase.google.com/docs/samples/#web
	Firebase CLI Reference
		https://firebase.google.com/docs/cli/
	Firebase Docs - Authenticate using Google Sign-In with JavaScript
		https://firebase.google.com/docs/auth/web/google-signin
	Firebase Database -- Authorization (user access), validation (data types, specs, etc.), and indexing
		https://firebase.google.com/docs/database/security/
	Firebase Storage -- 
		https://firebase.google.com/docs/storage/

FIREBASE COMMANDS OVERVIEW -- https://firebase.google.com/docs/cli/
	FIREBASE ADMIN COMMANDS
		login 	
			Authenticate to your Firebase account. Requires access to a web browser.
		logout 	
			Sign out of the Firebase CLI.
		login:ci 	
			Generate an authentication token for use in non-interactive environments.
		list 	
			Print a list of all of your Firebase projects.
		use 	
			Set active Firebase project, manage project aliases.
		open 	
			Quickly open a browser to relevant project resources.
		init 	
			Setup a new Firebase project in the current directory. This command will create a firebase.json configuration file in your current directory.
		help 	
			Display help information about the CLI or specific commands.
	FIREBASE DEV AND LOCAL DEV
		deploy 	
			Deploys your Firebase project. Relies on firebase.json configuration and your local project folder.
		serve 	
			Start a local web server with your Firebase Hosting configuration. Relies on firebase.json.
	FIREBASE DATABASE COMMANDS
		database:get 	
			Fetch data from the current project's database and display it as JSON. Supports querying on indexed data.
		database:set 	
			Replace all data at a specified location in the current project's database. Takes input from file, STDIN, or command-line argument.
		database:update 	
			Perform a partial update at a specified location in the current project's database. Takes input from file, STDIN, or command-line argument.
		database:push 	
			Push new data to a list at a specified location in the current project's database. Takes input from file, STDIN, or command-line argument.
		database:remove 	
			Delete all data at a specified location in the current project's database.
	FIREBASE HOSTING COMMANDS
		hosting:disable 	
			Stop serving Firebase Hosting traffic for the active project. A "Site Not Found" message will be displayed at your project's Hosting URL after running this command.